/* Google font - poppins */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap');
*{
    margin : 0px ;
    padding: 0px;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

body{
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: hsla(60, 100%, 50%, 0.848);
}

.main-div{
    height: 140px;
    width: 480px;
    background-color: aliceblue;
    border-radius: 12px;
     font-size: 20;
    display: block;
    text-align: center;
    box-shadow: 0px 5px 10px rgba(0 , 0, 0, 0.2);
}

.main-div h2{
    margin: 10px;
}

.main-div .button{

    height: 55px;
    width: 220px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: blue;
    cursor: pointer;
    font-size: 21px;
    border-radius: 12px;
    margin-left: 30%;
    padding: 10px;
    user-select: none;
}

.main-div .button.checked .icon{
      display: flex;
}


/* css for the rotation of the spin icon  */
.icon.spinner.spin{   /*this type of div selection is called Compound class selector*/
    animation: spin 1.3s ease-in-out infinite;
}

@keyframes spin {
    100%{
        transform: rotate(360deg);
    }
}


.main-div .button .btn-text{
    padding-left: 10px;
}
.icon.check{
    font-size: 19px;
    height: 25px;
    width: 25px;
    background-color: #0eb32f;
    align-items: center;
    display: inline-flex;
    border-radius: 50%;

}

.main-div .button .icon{
    padding: 5px;
    color: white;
    display: none;
}



                                              /* Note */
/* In CSS (Cascading Style Sheets), positions refer to the layout and placement of elements within a web page or document. CSS provides several properties for controlling the positioning of elements on a web page. Here are the main position values and how they work:
1. `static`:
   - This is the default position value for most HTML elements.
   - Elements with `position: static;` are positioned according to the normal flow of the document. They cannot be moved using the `top`, `bottom`, `left`, or `right` properties.
   
Example:
```css
.element {
  position: static;
}
```
2. `relative`:
   - Elements with `position: relative;` are positioned relative to their normal position in the document flow.
   - You can use the `top`, `bottom`, `left`, and `right` properties to offset the element from its normal position.
   
Example:
```css
.element {
  position: relative;
  top: 10px;
  left: 20px;
}
```
3. `absolute`:
   - Elements with `position: absolute;` are removed from the normal document flow and positioned relative to the nearest positioned ancestor (an ancestor with a position value other than `static`) or the initial containing block if there's no positioned ancestor.
   - Use `top`, `bottom`, `left`, and `right` properties to specify the exact position relative to the ancestor.
   
Example:
```css
.element {
  position: absolute;
  top: 50px;
  left: 100px;
}
```
4. `fixed`:
   - Elements with `position: fixed;` are removed from the document flow and are positioned relative to the viewport (the browser window).
   - They stay in the same position even if the user scrolls the page.
   
Example:
```css
.element {
  position: fixed;
  top: 0;
  left: 0;
}
```
5. `sticky`:
   - Elements with `position: sticky;` behave like `relative` positioning until they reach a specified threshold (e.g., when they scroll out of the viewport), after which they become `fixed` relative to the nearest ancestor with a scrolling mechanism (usually the viewport).
   - You can use the `top`, `bottom`, `left`, and `right` properties to specify the sticky position.

Example:
```css
.element {
  position: sticky;
  top: 20px;
}
*/

